{
	// Place your snippets for plantuml here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.

	// ** references
	// https://code.visualstudio.com/api/language-extensions/snippet-guide
	// https://plantuml.com/en/

	// ## Example
	"Example for PlantUML": {
		"prefix": "puml>example",
		"body": [
			"${1:first_placeholder}",
			"${2:second_placeholder}",
			"${0:last_placeholder}"
		],
		"description": "description"
	},

	// ### General
	// prefix: "puml>{something}"
	"Make a PlantUML initial block": {
		"prefix": "puml>start",
		"body": [
			"@startuml ${1:diagram_name}",
			"${0}",
			"@enduml"
		],
		"description": "Make start end end mark for plantUML"
	},
	"Set a note on the left or right hand of something": {
		"prefix": "puml>note",
		"body": [
			"note ${1:left} of ${2:name}: ${3:message}",
			"${0}"
		],
		"description": "Choose left or right side note is located"
	},

	// ### Class Diagram
	// prefix: "puml>class>{something}"
	"Group arrowhead of inheritances": {
		"prefix": "puml>class>attr>arrowhead",
		"body": [
			"skinparam groupInheritance ${1:n}",
			"${0}"
		],
		"description": "for ${1}, 1: no grouping, 2: grouping from 2, 3: grouping from 3, 4: grouping from 4"
	},
	"Hide attribute icons": {
		"prefix": "puml>class>attr>icon>hide",
		"body": [
			"skinparam classAttributeIconSize 0",
			"${0}"
		],
		"description": ""
	},
	"Hide elements of the class": {
		"prefix": "puml>class>attr>elem>hide",
		"body": [
			"hide ${1:class_name} circle",
			"hide $1 members",
			"hide $1 methods",
			"${0}"
		],
		"description": "If you show specific elements, replace hide as show.\nIf you want to hide every element of all classes, make class_name nothing."
	},
	"Set classes' minmum width": {
		"prefix": "puml>class>attr>width",
		"body": [
			"skinparam MinClassWidth ${1:width}",
			"${0}"
		]
	},
	"Set style of arrows": {
		"prefix": "puml>class>attr>line",
		"body": [
			"skinparam linetype ${1:ortho}",
			"${0}"
		],
		"description": "for ${1}, polyline, ortho"
	},
	// #### Types
	"Make a class": {
		"prefix": "puml>class>class",
		"body": [
			"class ${1:reference_name} as ${2:\"alias_name\"} {",
			"${3:property_name}",
			"${4:method_name}()",
			"}",
			"${0}"
		]
	},
	"Make an Interface": {
		"prefix": "puml>class>inter",
		"body": [
			"interface ${1:interface_name} <<interface>> {",
			"${2:property_name}",
			"${3:method_name}()",
			"}",
			"${0}"
		]
	},
	"Group some classes together": {
		"prefix": "puml>class>group",
		"body": [
			"together {",
			"class ${1:class1}",
			"class ${2:class2}",
			"${0}",
			"}"
		],
		"description": "The layout engine will try to group the classes"
	},
	"Group some classes in any kind of package": {
		"prefix": "puml>class>package",
		"body": [
			"package ${1:package_name} <<${2:Folder}>> {",
			"class ${3:class1}",
			"class ${4:class2}",
			"${0}",
			"}"
		],
		"description": "for ${2}, Node, Rectangle, Folder, Frame, Cloud or Database"
	},
	"Group some classes in a rectangle": {
		"prefix": "puml>class>package>rectangle",
		"body": [
			"rectangle ${1:rectangle_name} {",
			"class ${2:class1}",
			"class ${3:class2}",
			"${0}",
			"}"
		]
	},
	// #### Relations
	"Connect classes for association to express association": {
		"prefix": "puml>class>asso",
		"body": [
			"${1:caller} -> ${4:\"n\"} ${2:callee}: \"${3:behavior}\"",
			"${0}"
		],
		"description": "Adjust length of line of arrow with space in behavior"
	},
	"Inheritance class to express generalization": {
		"prefix": "puml>class>gene",
		"body": [
			"${1:parent} <|-- ${2:child}",
			"${0}"
		],
		"description": "Adjust length of line of arrow the number of dashs"
	},
	"Imprement class to express realization": {
		"prefix": "puml>class>real",
		"body": [
			"${1:interface_name} <|.. ${2:concrete_type_name}",
			"${0}"
		],
		"description": "Adjust length of line of arrow the number of dots"
	},

	// ### Sequence Diagram
	// prefix: "puml>sequence>{something}"
	"Set a note over some lifetimes": {
		"prefix": "puml>sequence>note>over",
		"body": [
			"note over ${1:participant_name1}, ${2:participant_name2}: ${3:message}",
			"${0}"
		],
		"description": "Add participants where the note is over"
	},
	"Set a note across all lifetimes": {
		"prefix": "puml>sequence>note>across",
		"body": [
			"note across: ${1:message}",
			"${0}"
		]
	},
	"Set a divider": {
		"prefix": "puml>sequence>note>across",
		"body": [
			"==${1:message}==",
			"${0}"
		],
		"description": "Divider message is optional"
	},
	"Activate": {
		"prefix": "puml>seqence>attr>activate",
		"body": [
			"activate ${1:participant_name}",
			"${0}",
			"deactivate"
		]
	},
	// #### Participants
	"Make any kind of Participant": {
		"prefix": "puml>sequence>parti",
		"body": [
			"${1:participant} ${2:reference_name} as ${3:\"alias_name\"}",
			"${0}"
		],
		"description": "for ${1}, participant, actor, boundary, control, entity, database, collections or queue"
	},
	"Create any kind of participant from another": {
		"prefix": "puml>sequence>create",
		"body": [
			"create ${1:participant} ${2:reference_name} as ${3:\"alias_name\"}",
			"${4:caller} -> ${2}",
			"${0}"
		],
		"description": "for ${1}, participant, actor, boundary, control, entity, database, collections or queue"
	},
	"Destroy any kind of participant from another": {
		"prefix": "puml>sequence>destroy",
		"body": [
			"destroy ${1:participant_name}",
			"${0}"
		],
		"description": "Set under the relation"
	},
	// #### Request and Response
	"Make a request": {
		"prefix": "puml>seqence>req",
		"body": [
			"${1:client} -> ${2:server}: ${3:requset}",
			"${0}"
		]
	},
	"Make a response": {
		"prefix": "puml>seqence>res",
		"body": [
			"${1:client} <-- ${2:server}: ${3:response}",
			"${0}"
		]
	},
	"Make a asynchrony": {
		"prefix": "puml>seqence>async",
		"body": [
			"${1:client} ->> ${2:server}: ${3:response}",
			"${0}"
		]
	},
	
	
	
}

